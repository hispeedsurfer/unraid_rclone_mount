#!/bin/bash

#####################################################
######### Rclone with MergerFS Mount Script #########
#####################################################
#   Credits to BinsonBuzz for the original script!  #
# https://github.com/BinsonBuzz/unraid_rclone_mount/#
#####################################################
#				Version 2022-rev 1.1 				#
#    https://github.com/drpoutine/unraid_rclone/    #
#####################################################

####### EDIT ONLY THESE SETTINGS #######

# INSTRUCTIONS
# 1. RcloneRemoteName is what you to name the service for log purposes only.
# 2. RcloneRemoteMount is the location.
# 3. rcloneVFSMount is the location where you want rclone to mount your remote files. 
# 4. LocalFiles is your local folders you want to be included in the MergerFS location. (pretty self explanatory)
# 5. MergedLocation is your MergerFS location. 


# Optional: Include custom command to pass to rclone in the commands section. if you add more than 8, please add the variables on line 149.
# Optional: Include extra folders in mergerfs mount. You'll need to add the variables for more folders and include the snippet after line 215. 
#           Ensure you have the format correct and verify indents. We like clean scripts!

# REQUIRED SETTINGS
RcloneRemoteName="NameMePlease" # name of your mount. do not include symbols.
RcloneRemoteMount="myremotename:/optionalfolder" # You can include a specific Directory as well. (e.g, gdrive:/YourFolder/)
rcloneVFSMount="/mnt/user/mediacenter/cloud/rcloneVFS/" # where your rclone remote will be located.(e.g. /mnt/user/mount_rclone)
LocalFiles="/mnt/user/mediacenter/cloud/cache/" # location of the local files and MountFolders you want to upload to rclone (e.g. /mnt/user/local) Enter 'ignore' to disable
RcloneCacheShare="/mnt/user0/mediacenter/cloud/rcloneVFS/" # user disk0 for cache on unraid
MergedLocation="/mnt/user/mediacenter/cloud/MergerFS/" # MergerFS Location(e.g. /mnt/user/mount_mergerfs). Enter 'ignore' to disable
DirCacheTime="72h" # rclone dir cache time
DockerStart="plex tautulli" # list of dockers, separated by space, to start once mergerfs mount verified. Remember to disable AUTOSTART for dockers added in docker settings page. Consult 'docker ps' view the container names.


# OPTIONAL SETTINGS

# Add extra paths to mergerfs mount in addition to LocalFiles
LocalFiles2="ignore" # without trailing slash e.g. /mnt/user/other__remote_mount/or_other_local_folder.  Enter 'ignore' to disable
LocalFiles3="ignore"
LocalFiles4="ignore"

# Add extra commands or filters for rclone. 
Command1="--rc"
Command2=""
Command3=""
Command4=""
Command5=""
Command6=""
Command7=""
Command8=""

CreateBindMount="Y" # Y/N. Choose whether to bind traffic to a particular network adapter
RCloneMountIP="192.168.1.11" # My unraid IP is 172.30.12.2 so I create another similar IP address
NetworkAdapter="eth0" # choose your network adapter. eth0 recommended
VirtualIPNumber="2" # creates eth0:x e.g. eth0:1.  I create a unique virtual IP addresses for each mount & upload so I can monitor and traffic shape for each of them

####### END SETTINGS #######

###############################################################################
#####   DO NOT EDIT ANYTHING BELOW UNLESS YOU KNOW WHAT YOU ARE DOING   #######
###############################################################################

####### Preparing mount location variables #######
RcloneMountLocation="$rcloneVFSMount" # Location for rclone mount
LocalFilesLocation="$LocalFiles" # Location for local files to be merged with rclone mount
MergerFSMountLocation="$MergedLocation" # Rclone data folder location

####### create directories for rclone mount and mergerfs mounts #######
mkdir -p /mnt/user/appdata/rclone/remotes/$RcloneRemoteName # for script files
if [[  $LocalFiles == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating local folders as requested."
	LocalFilesLocation="/tmp/$RcloneRemoteName"
	eval mkdir -p $LocalFilesLocation
#else
#	echo "$(date "+%d.%m.%Y %T") INFO: Creating local folders."
#	eval mkdir -p $LocalFilesLocation/"$MountFolders"
fi
mkdir -p $RcloneMountLocation

if [[  $MergedLocation == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating MergerFS folders as requested."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Creating MergerFS folders."
	mkdir -p $MergerFSMountLocation
fi


#######  Check if script is already running  #######
echo "$(date "+%d.%m.%Y %T") INFO: *** Starting mount of remote ${RcloneRemoteName}"
echo "$(date "+%d.%m.%Y %T") INFO: Checking if this script is already running."
if [[ -f "/mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Exiting script as already running."
	exit
else
	echo "$(date "+%d.%m.%Y %T") INFO: Script not running - proceeding."
	touch /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running
fi

####### Checking have connectivity #######

echo "$(date "+%d.%m.%Y %T") INFO: *** Checking if online"
ping -q -c2 google.com > /dev/null # -q quiet, -c number of pings to perform
if [ $? -eq 0 ]; then # ping returns exit status 0 if successful
	echo "$(date "+%d.%m.%Y %T") PASSED: *** Internet online"
else
	echo "$(date "+%d.%m.%Y %T") FAIL: *** No connectivity.  Will try again on next run"
	rm /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running
	exit
fi

#######  Create Rclone Mount  #######

# Check If Rclone Mount Already Created
if [[ -f "$RcloneMountLocation/checkfile" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Success ${RcloneRemoteName} remote is already mounted."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Mount not running. Will now mount ${RcloneRemoteName} remote."
# Creating checkfile file in case it doesn't already exist
	echo "$(date "+%d.%m.%Y %T") INFO: Recreating checkfile file for ${RcloneRemoteName} remote."
	touch checkfile
	rclone copy checkfile $RcloneRemoteMount -vv --no-traverse
# Check bind option
	if [[  $CreateBindMount == 'Y' ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: *** Checking if IP address ${RCloneMountIP} already created for remote ${RcloneRemoteName}"
		ping -q -c2 $RCloneMountIP > /dev/null # -q quiet, -c number of pings to perform
		if [ $? -eq 0 ]; then # ping returns exit status 0 if successful
			echo "$(date "+%d.%m.%Y %T") INFO: *** IP address ${RCloneMountIP} already created for remote ${RcloneRemoteName}"
		else
			echo "$(date "+%d.%m.%Y %T") INFO: *** Creating IP address ${RCloneMountIP} for remote ${RcloneRemoteName}"
			ip addr add $RCloneMountIP/24 dev $NetworkAdapter label $NetworkAdapter:$VirtualIPNumber
		fi
		echo "$(date "+%d.%m.%Y %T") INFO: *** Created bind mount ${RCloneMountIP} for remote ${RcloneRemoteName}"
	else
		RCloneMountIP=""
		echo "$(date "+%d.%m.%Y %T") INFO: *** Creating mount for remote ${RcloneRemoteName}"
	fi
# create rclone mount
	rclone mount \
	--config /boot/config/plugins/rclone/.rclone.conf \
	--user-agent "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36" \
	--use-mmap \
	--dir-cache-time $DirCacheTime \
	--cache-dir "$RcloneCacheShare/cache/$RcloneRemoteName" \
	--timeout 60s \
	--umask 000 \
	--allow-other \
	--vfs-cache-mode writes \
	--buffer-size 16M \
	--vfs-read-ahead 4096M \
	--vfs-read-chunk-size 128M \
	--vfs-read-chunk-size-limit 256M \
	--log-level INFO \
	--tpslimit 10 \
	--bind=$RCloneMountIP \
	$Command1 $Command2 $Command3 $Command4 $Command5 $Command6 $Command7 $Command8 \
	$RcloneRemoteMount $RcloneMountLocation &

# Check if Mount Successful
	echo "$(date "+%d.%m.%Y %T") INFO: sleeping for 5 seconds"
# slight pause to give mount time to finalise
	sleep 5
	echo "$(date "+%d.%m.%Y %T") INFO: continuing..."
	if [[ -f "$RcloneMountLocation/checkfile" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Successful mount of ${RcloneRemoteName} mount."
	else
		echo "$(date "+%d.%m.%Y %T") CRITICAL: ${RcloneRemoteName} mount failed - please check for problems.  Stopping dockers"
		docker stop $DockerStart
		rm /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running
		exit
	fi
fi

####### Start MergerFS Mount #######

if [[  $MergedLocation == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating mergerfs mount as requested."
else
	if [[ -f "$MergerFSMountLocation/checkfile" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Check successful, ${RcloneRemoteName} mergerfs mount in place."
	else
# check if mergerfs already installed
		if [[ -f "/bin/mergerfs" ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs already installed, proceeding to create mergerfs mount"
		else
# Build mergerfs binary
			echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs not installed - installing now."
			mkdir -p /mnt/user/appdata/rclone/mergerfs
			docker run -v /mnt/user/appdata/rclone/mergerfs:/build --rm trapexit/mergerfs-static-build
			mv /mnt/user/appdata/rclone/mergerfs/mergerfs /bin
# check if mergerfs install successful
			echo "$(date "+%d.%m.%Y %T") INFO: *sleeping for 5 seconds"
			sleep 5
			if [[ -f "/bin/mergerfs" ]]; then
				echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs installed successfully, proceeding to create mergerfs mount."
			else
				echo "$(date "+%d.%m.%Y %T") ERROR: Mergerfs not installed successfully.  Please check for errors.  Exiting."
				rm /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running
				exit
			fi
		fi
# Create mergerfs mount
		echo "$(date "+%d.%m.%Y %T") INFO: Creating ${RcloneRemoteName} mergerfs mount."
# Extra Mergerfs folders
		if [[  $LocalFiles2 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFiles2} to ${RcloneRemoteName} mergerfs mount."
			LocalFiles2=":$LocalFiles2"
		else
			LocalFiles2=""
		fi
		if [[  $LocalFiles3 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFiles3} to ${RcloneRemoteName} mergerfs mount."
			LocalFiles3=":$LocalFiles3"
		else
			LocalFiles3=""
		fi
		if [[  $LocalFiles4 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFiles4} to ${RcloneRemoteName} mergerfs mount."
			LocalFiles4=":$LocalFiles4"
		else
			LocalFiles4=""
		fi
# make sure mergerfs mount point is empty
		mv $MergerFSMountLocation $LocalFilesLocation
		mkdir -p $MergerFSMountLocation
# mergerfs mount command
		mergerfs $LocalFilesLocation:$RcloneMountLocation$LocalFiles2$LocalFiles3$LocalFiles4 $MergerFSMountLocation -o rw,async_read=false,use_ino,allow_other,func.getattr=newest,category.action=all,category.create=ff,cache.files=partial,dropcacheonclose=true
# check if mergerfs mount successful
		echo "$(date "+%d.%m.%Y %T") INFO: Checking if ${RcloneRemoteName} mergerfs mount created."
		if [[ -f "$MergerFSMountLocation/checkfile" ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Check successful, ${RcloneRemoteName} mergerfs mount created."
		else
			echo "$(date "+%d.%m.%Y %T") CRITICAL: ${RcloneRemoteName} mergerfs mount failed.  Stopping dockers."
			docker stop $DockerStart
			rm /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running
			exit
		fi
	fi
fi

####### Starting Dockers That Need Mergerfs Mount To Work Properly #######

# only start dockers once
if [[ -f "/mnt/user/appdata/rclone/remotes/$RcloneRemoteName/dockers_started" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: dockers already started."
else
# Check CA Appdata plugin not backing up or restoring
	if [ -f "/tmp/ca.backup2/tempFiles/backupInProgress" ] || [ -f "/tmp/ca.backup2/tempFiles/restoreInProgress" ] ; then
		echo "$(date "+%d.%m.%Y %T") INFO: Appdata Backup plugin running - not starting dockers."
	else
		touch /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/dockers_started
		echo "$(date "+%d.%m.%Y %T") INFO: Starting dockers."
		docker start $DockerStart
	fi
fi

rm /mnt/user/appdata/rclone/remotes/$RcloneRemoteName/mount_running
echo "$(date "+%d.%m.%Y %T") INFO: Script complete"

exit
